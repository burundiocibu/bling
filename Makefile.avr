MCU=atmega328
PROGRAMMER_MCU=m328p
PROJECTNAME=main
PRJSRC=main.c
AVRDUDE_PROGRAMMERID=-c avr109
AVRDUDE_PORT=-P /dev/tty.usbmodemfa121

# for a from-the-factory 32u4 that has the div8 on the clock, need to use -B 5 in avrdude
AVRDUDE_PROGRAMMERID=-c usbtiny
AVRDUDE_PORT=

OPTLEVEL=s
#F_CPU=16000000
F_CPU=8000000
SLAVE=1

AVRDUDE=avrdude -F -p $(PROGRAMMER_MCU) $(AVRDUDE_PROGRAMMERID) $(AVRDUDE_PORT)

CFLAGS=-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums             \
	-DF_CPU=$(F_CPU)UL -DAVR=1              \
	-DSLAVE_NUMBER=$(SLAVE)                 \
	-funsigned-bitfields -funsigned-char    \
	-Wall -Wstrict-prototypes               \
	-Wa,-ahlms=$(firstword                  \
	$(filter %.lst, $(<:.c=.lst)))

CPPFLAGS=-fno-exceptions -Wall                   \
	-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums              \
	-DF_CPU=$(F_CPU)UL -DAVR=1               \
	-DSLAVE_NUMBER=$(SLAVE)                  \
	-funsigned-bitfields -funsigned-char     \
	-Wa,-ahlms=$(firstword                   \
	$(filter %.lst, $(<:.cpp=.lst)))


LDFLAGS=-Wl,-Map,$(TRG).map -mmcu=$(MCU) \
	-lm $(LIBS)

CC=avr-gcc
CPP=avr-gcc

#=================================================================
.SUFFIXES: .flash .hex .elf
.PHONY: clean nrf_test.flash

all: slave_main.flash

clean:
	rm -f *.hex *.o *.elf *.map *.lst


avr_throbber.o: avr_throbber.cpp
avr_spi.o: avr_spi.cpp
avr_i2c.o: avr_i2c.cpp
avr_tlc5940.o: avr_tlc5940.cpp
avr_rtc.o: avr_rtc.cpp
avr_dbg.o: avr_dbg.cpp
avr_mike.o: avr_mike.cpp
avr_max1704x.o: avr_max1704x.cpp
nrf24l01.o: nrf24l01.cpp
messages.o: messages.cpp
lcd_plate.o: lcd_plate.cpp


slave_main.o: slave_main.cpp
tlc-test.o: slave_main.cpp
rtc-test.o: rtc-test.cpp

prog: slave_main.flash

slave_main.elf: slave_main.o avr_rtc.o avr_spi.o i2c.o lcd_plate.o avr_tlc5940.o avr_mike.o nrf24l01.o messages.o avr_dbg.o \
	avr_max1704x.o

slave_flasher.elf: slave_flasher.o avr_rtc.o avr_tlc5940.o avr_mike.o

slave_test.elf: slave_test.o avr_rtc.o avr_tlc5940.o avr_mike.o nrf24l01.o avr_spi.o i2c.o messages.o avr_dbg.o \
	lcd_plate.o avr_max1704x.o

tlc-test.elf: tlc-test.o avr_tlc5940.o

mike-test.elf: mike-test.o avr_tlc5940.o avr_rtc.o i2c.o lcd_plate.o avr_mike.o

rtc-test.elf: rtc-test.o lcd_plate.o i2c.o avr_rtc.o

getfuse:
	$(AVRDUDE) -v -U lfuse:r:-:i
#	$(AVRDUDE) -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i

geteeprom:
	$(AVRDUDE) -U eeprom:r:-:r | hexdump 

getfusetiny:
	avrdude -c usbtiny -B 5 -p m32u4 -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i


# http://forums.reprap.org/read.php?158,97219
flashboot:
	echo this needs to be done from the SPI/JTAG interface
	avrdude -c usbtiny -B 1 -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0x99:m -U efuse:w:0xf3:m
	avrdude -c usbtiny -B 1 -p m32u4 -U flash:w:BootloaderCDC.hex
	avrdude -c usbtiny -B 1 -p m32u4 -U lock:w:0x0f:m

fuse328:
	$(AVRDUDE) -v -U lfuse:w:0xe2:m -U hfuse:w:0xd9:m -U efuse:w:0x07:m

#===============================================
# This is a special target to build the nRF24L01 bootloader
BOOTADDR = 0x3800 # Use the full 2k boot flash area
nrf_boot%: LFLAGS=-Wl,-Ttext,$(BOOTADDR),--relax -mmcu=$(MCU) -nodefaultlibs -nostartfiles
nrf_boot%: CFLAGS=-g -Os -fno-inline-small-functions -Wall -mmcu=$(MCU) -I. -DF_CPU=$(F_CPU) -DBOOTADDR=$(BOOTADDR)

nrf_boot: nrf_boot.o nrf24l01.o avr_spi.o avr_rtc.o
	echo this must be done from the SPI/JTAG I/F
	avr-gcc $(LFLAGS) -Wl,-Map,$@.map -o $@.elf $^
	avr-objdump --source -d $@.elf > $@.lst
	avr-size --common -d $@.elf
	avr-objcopy -j .text -O ihex $@.elf $@.hex

# Note this programs the fuses to have the device boot to the boot flash as opposed to the app
# and preserve the EEPROM through chip erases
flash_nrf_boot: nrf_boot.hex
	$(AVRDUDE) -v -U  lfuse:w:0xe2:m -U hfuse:w:0xd0:m -U efuse:w:0x07:m
	$(AVRDUDE) -U flash:w:$^:i

#=================================================================
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.cpp
	$(CC) $(CPPFLAGS) -c $< -o $@

%.elf: %.o
	$(CC) -g -mmcu=$(MCU) -Wl,-Map,$(@:.elf=.map) -o $@ $^

%.hex : %.elf
	avr-objcopy -j .text -j .data -O ihex $^ $@

%.flash : %.hex
	$(AVRDUDE) -U flash:w:$<

MCU=atmega328
PROGRAMMER_MCU=m328p

# for a from-the-factory 32u4 that has the div8 on the clock, need to use -B 5 in avrdude
# until the clock is sped up.
AVRDUDE_PROGRAMMERID=-c usbtiny
AVRDUDE_PORT=

OPTLEVEL=s
F_CPU=8000000

AVRDUDE=sudo avrdude -F -p $(PROGRAMMER_MCU) $(AVRDUDE_PROGRAMMERID) $(AVRDUDE_PORT)

NUMBER_OF_TLC5940=1
slave216_main.o: NUMBER_OF_TLC5940=14

CFLAGS=-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums             \
	-DF_CPU=$(F_CPU)UL -DAVR=1              \
	-DBOOTADDR=$(BOOTADDR)                  \
	-DNUMBER_OF_TLC5940=$(NUMBER_OF_TLC5940)\
	-funsigned-bitfields -funsigned-char    \
	-Wall -Wstrict-prototypes               \
	-Wa,-ahlms=$(firstword                  \
	$(filter %.lst, $(<:.c=.lst)))

CPPFLAGS=-fno-exceptions -Wall                   \
	-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums              \
	-DF_CPU=$(F_CPU)UL -DAVR=1               \
	-DBOOTADDR=$(BOOTADDR)                   \
	-DNUMBER_OF_TLC5940=$(NUMBER_OF_TLC5940) \
	-funsigned-bitfields -funsigned-char     \
	-Wa,-ahlms=$(firstword                   \
	$(filter %.lst, $(<:.cpp=.lst)))

LDFLAGS=-lm

CC=avr-gcc
CPP=avr-gcc

#=================================================================
.PHONY: clean %.flash
.PRECIOUS: %.hex

all: slave_main.hex slave216_main.hex nrf_boot.hex

clean:
	rm -f *.hex *.o *.elf *.map *.lst


avr_throbber.o: avr_throbber.cpp
avr_spi.o: avr_spi.cpp
avr_i2c.o: avr_i2c.cpp
avr_tlc5940.o: avr_tlc5940.cpp
avr_rtc.o: avr_rtc.cpp
avr_dbg.o: avr_dbg.cpp
avr_mike.o: avr_mike.cpp
avr_max1704x.o: avr_max1704x.cpp
nrf24l01.o: nrf24l01.cpp
messages.o: messages.cpp
Effect.o: Effect.cpp Effect.hpp
lcd_plate.o: lcd_plate.cpp


slave_main.o: slave_main.cpp
tlc-test.o: slave_main.cpp
rtc-test.o: rtc-test.cpp

slave_main.elf: slave_main.o avr_rtc.o avr_spi.o i2c.o lcd_plate.o avr_tlc5940.o avr_mike.o nrf24l01.o messages.o avr_dbg.o \
	avr_max1704x.o Effect.o

slave216_main.elf: slave216_main.o avr_rtc.o avr_spi.o avr_tlc5940.o nrf24l01.o messages.o avr_dbg.o Effect.o


slave_flasher.elf: slave_flasher.o avr_rtc.o avr_tlc5940.o avr_mike.o

slave_test.elf: slave_test.o avr_rtc.o avr_tlc5940.o avr_mike.o nrf24l01.o avr_spi.o i2c.o messages.o avr_dbg.o \
	lcd_plate.o avr_max1704x.o

tlc-test.elf: tlc-test.o avr_tlc5940.o

mike-test.elf: mike-test.o avr_tlc5940.o avr_rtc.o i2c.o lcd_plate.o avr_mike.o

rtc-test.elf: rtc-test.o lcd_plate.o i2c.o avr_rtc.o

getfuse:
	$(AVRDUDE) -v -U lfuse:r:-:i
#	$(AVRDUDE) -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i

geteeprom:
	$(AVRDUDE) -U eeprom:r:-:r | hexdump

getfusetiny:
	avrdude -c usbtiny -B 5 -p m32u4 -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i


# http://forums.reprap.org/read.php?158,97219x
flashboot:
	echo this needs to be done from the SPI/JTAG interface
	avrdude -c usbtiny -B 1 -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0x99:m -U efuse:w:0xf3:m
	avrdude -c usbtiny -B 1 -p m32u4 -U flash:w:BootloaderCDC.hex
	avrdude -c usbtiny -B 1 -p m32u4 -U lock:w:0x0f:m

fuse328:
	$(AVRDUDE) -v -U lfuse:w:0xe2:m -U hfuse:w:0xd9:m -U efuse:w:0x07:m

#===============================================
# This is a special target to build the nRF24L01 bootloader
# Note that this address is in bytes where as the AVR docs specfy it in words. For a 
# bootloader to be located at 0x3800, specify an address of 0x7000
BOOTADDR=0x7000
# kavr also had -nodefaultlibs
nrf_boot%: LDFLAGS=-Wl,-Ttext,$(BOOTADDR),--relax -mmcu=$(MCU) -nostartfiles
nrf_boot%: CPPFLAGS=-g -Os -fno-inline-small-functions -Wall -mmcu=$(MCU) -I. -DF_CPU=$(F_CPU) -DBOOTADDR=$(BOOTADDR)
nrf_boot.o: nrf_boot.cpp

# Note this programs the fuses to have the device boot to the boot flash as opposed to the app
# and preserve the EEPROM through chip erases
nrf_boot.flash: nrf_boot.hex
	$(AVRDUDE) -U lfuse:w:0xe2:m -U hfuse:w:0xd0:m -U efuse:w:0x07:m
	$(AVRDUDE) -U flash:w:$^:i
#=================================================================


%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.cpp
	$(CC) $(CPPFLAGS) -c $< -o $@

%.elf: %.o
	$(CC) $(LDFLAGS) -g -mmcu=$(MCU) -Wl,-Map,$(@:.elf=.map) -o $@ $^

%.hex: %.elf
	avr-size --common -d $^
	avr-objcopy -j .text -j .data -O ihex $^ $@

%.lst: %.elf
	avr-objdump --source -d $^ > $@

%.flash : %.hex
	$(AVRDUDE) -U flash:w:$<

MCU=atmega328
PROGRAMMER_MCU=m328p

# for a from-the-factory 32u4 that has the div8 on the clock, need to use -B 5 in avrdude
# until the clock is sped up.
AVRDUDE_PROGRAMMERID=-c usbtiny
AVRDUDE_PORT=

OPTLEVEL=s
F_CPU=8000000

AVRDUDE=sudo avrdude -F -p $(PROGRAMMER_MCU) $(AVRDUDE_PROGRAMMERID) $(AVRDUDE_PORT)

NUMBER_OF_TLC5940=1
# This doesn't work!! Still have to do a clean build since
#slave216_main.o: NUMBER_OF_TLC5940=14

slave%:CFLAGS=-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums             \
	-DF_CPU=$(F_CPU)UL -DAVR=1              \
	-DBOOTADDR=$(BOOTADDR)                  \
	-DNUMBER_OF_TLC5940=$(NUMBER_OF_TLC5940)\
	-funsigned-bitfields -funsigned-char    \
	-Wall -Wstrict-prototypes               \
	-Wa,-ahlms=$(firstword                  \
	$(filter %.lst, $(<:.c=.lst)))

slave%:CPPFLAGS=-fno-exceptions -Wall                   \
	-I. $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fpack-struct -fshort-enums              \
	-DF_CPU=$(F_CPU)UL -DAVR=1               \
	-DBOOTADDR=$(BOOTADDR)                   \
	-DNUMBER_OF_TLC5940=$(NUMBER_OF_TLC5940) \
	-funsigned-bitfields -funsigned-char     \
	-Wa,-ahlms=$(firstword                   \
	$(filter %.lst, $(<:.cpp=.lst)))

slave%:LDFLAGS=-lm

slave%:CC=avr-gcc
slave%:CPP=avr-gcc

#=================================================================
.PRECIOUS: %.hex

slave/avr_throbber.o: avr_throbber.cpp
slave/avr_spi.o: avr_spi.cpp
slave/avr_tlc5940.o: avr_tlc5940.cpp
slave/avr_rtc.o: avr_rtc.cpp
slave/avr_dbg.o: avr_dbg.cpp
slave/avr_mike.o: avr_mike.cpp
slave/avr_max1704x.o: avr_max1704x.cpp
slave/i2c.o: i2c.cpp
slave/nrf24l01.o: nrf24l01.cpp
slave/messages.o: messages.cpp
slave/Effect.o: Effect.cpp Effect.hpp Effect_sets.hpp
slave/lcd_plate.o: lcd_plate.cpp


slave/slave_main.o: slave_main.cpp slave_main_version.hpp
slave/tlc-test.o: slave_main.cpp
slave/rtc-test.o: rtc-test.cpp

Effect_sets.hpp: slaves make_sets.py
	make_sets.py > $@

slave/slave_main.elf: slave/slave_main.o slave/avr_rtc.o slave/avr_spi.o slave/i2c.o\
   slave/lcd_plate.o slave/avr_tlc5940.o slave/avr_mike.o slave/nrf24l01.o\
   slave/messages.o slave/avr_dbg.o slave/avr_max1704x.o slave/Effect.o

slave/slave216_main.elf: slave/slave216_main.o slave/avr_rtc.o avr_spi.o slave/avr_tlc5940.o\
   slave/nrf24l01.o slave/messages.o slave/avr_dbg.o slave/Effect.o

slave/slave_flasher.elf: slave/slave_flasher.o slave/avr_rtc.o slave/avr_tlc5940.o slave/avr_mike.o

slave/slave_test.elf: slave/slave_test.o slave/avr_rtc.o slave/avr_tlc5940.o slave/avr_mike.o\
   slave/nrf24l01.o slave/avr_spi.o slave/i2c.o slave/messages.o slave/avr_dbg.o\
   slave/lcd_plate.o slave/avr_max1704x.o

slave/tlc-test.elf: slave/tlc-test.o slave/avr_tlc5940.o

slave/mike-test.elf: slave/mike-test.o slave/avr_tlc5940.o slave/avr_rtc.o slave/i2c.o\
   slave/lcd_plate.o slave/avr_mike.o

slave/rtc-test.elf: slave/rtc-test.o slave/lcd_plate.o slave/i2c.o slave/avr_rtc.o

getfuse:
	$(AVRDUDE) -v -U lfuse:r:-:i
#	$(AVRDUDE) -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i

geteeprom:
	$(AVRDUDE) -U eeprom:r:-:r | hexdump

getfusetiny:
	avrdude -c usbtiny -B 5 -p m32u4 -U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i


# http://forums.reprap.org/read.php?158,97219x
flashboot:
	echo this needs to be done from the SPI/JTAG interface
	avrdude -c usbtiny -B 1 -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0x99:m -U efuse:w:0xf3:m
	avrdude -c usbtiny -B 1 -p m32u4 -U flash:w:BootloaderCDC.hex
	avrdude -c usbtiny -B 1 -p m32u4 -U lock:w:0x0f:m

fuse328:
	$(AVRDUDE) -v -U lfuse:w:0xe2:m -U hfuse:w:0xd9:m -U efuse:w:0x07:m

#===============================================
# This is a special target to build the nRF24L01 bootloader
# Note that this address is in bytes where as the AVR docs specfy it in words. For a 
# bootloader to be located at 0x3800, specify an address of 0x7000
BOOTADDR=0x7000
# kavr also had -nodefaultlibs
slave/nrf_boot%: LDFLAGS=-Wl,-Ttext,$(BOOTADDR),--relax -mmcu=$(MCU) -nostartfiles
slave/nrf_boot%: CPPFLAGS=-g -Os -fno-inline-small-functions -Wall -mmcu=$(MCU) -I. -DF_CPU=$(F_CPU) -DBOOTADDR=$(BOOTADDR)
slave/nrf_boot.o: nrf_boot.cpp

# Note this programs the fuses to have the device boot to the boot flash as opposed to the app
# and preserve the EEPROM through chip erases
nrf_boot.flash: slave/nrf_boot.hex
	$(AVRDUDE) -U lfuse:w:0xe2:m -U hfuse:w:0xd0:m -U efuse:w:0x07:m
	$(AVRDUDE) -U flash:w:$^:i
#=================================================================


slave/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

slave/%.o: %.cpp
	$(CC) $(CPPFLAGS) -c $< -o $@

%.elf: %.o
	$(CC) $(LDFLAGS) -g -mmcu=$(MCU) -Wl,-Map,$(@:.elf=.map) -o $@ $^

%.hex: %.elf
	avr-size --common -d $^
	avr-objcopy -j .text -j .data -O ihex $^ $@

%.lst: %.elf
	avr-objdump --source -d $^ > $@

%.flash : %.hex
	$(AVRDUDE) -U flash:w:$<
